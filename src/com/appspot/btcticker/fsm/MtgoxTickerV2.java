
// line 1 "MtgoxTickerV2.ragel"
// Generated using:
// ragel -J -o src/com/appspot/btcticker/fsm/MtgoxTickerV2.java MtgoxTickerV2.ragel
//

package com.appspot.btcticker.fsm;

import com.appspot.btcticker.model.Valuation;

public class MtgoxTickerV2 {

	public static final String URL_V2 = "https://data.mtgox.com/api/2/BTCUSD/money/ticker";
	

// line 17 "src/com/appspot/btcticker/fsm/MtgoxTickerV2.java"
private static byte[] init__ticker_actions_0()
{
	return new byte [] {
	    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,    5,    2,
	    0,    1
	};
}

private static final byte _ticker_actions[] = init__ticker_actions_0();


private static short[] init__ticker_key_offsets_0()
{
	return new short [] {
	    0,    0,    1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
	   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
	   23,   24,   25,   26,   27,   28,   29,   37,   43,   44,   46,   47,
	   48,   49,   50,   58,   64,   65,   67,   68,   69,   71,   72,   73,
	   79,   85,   86,   87,   88,   90,   97,  104,  111,  118,  124,  125,
	  126,  128,  132,  134,  137,  144,  151,  157,  158,  159,  160,  166,
	  172,  173,  174,  175,  177,  184,  191,  198,  205,  211,  212,  213,
	  215,  219,  221,  224,  231,  238,  245,  251,  252,  253,  254,  260,
	  266,  267,  268,  269,  271,  278,  285,  292,  299,  305,  306,  307,
	  309,  313,  315,  318,  325,  332,  339,  345,  346,  347,  348,  354,
	  360,  361,  362,  363,  365,  372,  379,  386,  393,  399,  400,  401,
	  403,  407,  409,  412,  413,  419,  425,  426,  427,  428,  430,  437,
	  444,  451,  458,  464,  465,  466,  468,  472,  474,  477,  484,  491,
	  497,  498,  499,  500,  506,  512,  513,  514,  515,  517,  524,  531,
	  538,  545,  551,  552,  553,  555,  559,  561,  564,  571,  578,  585,
	  591,  592,  593,  594,  600,  606,  607,  608,  609,  611,  618,  625,
	  632,  639,  645,  646,  647,  649,  653,  655,  658,  665,  672,  679,
	  685,  686,  687,  688,  694,  700,  701,  702,  703,  705,  712,  719,
	  726,  733,  739,  740,  741,  743,  747,  749,  752
	};
}

private static final short _ticker_key_offsets[] = init__ticker_key_offsets_0();


private static char[] init__ticker_trans_keys_0()
{
	return new char [] {
	  123,   34,  114,  101,  115,  117,  108,  116,   34,   58,   34,  115,
	  117,   99,   99,  101,  115,  115,   34,   44,   34,  100,   97,  116,
	   97,   34,   58,  123,   34,   95,   98,  108,  115,   65,   90,   97,
	  122,   34,   95,   65,   90,   97,  122,   58,   34,  123,   34,   34,
	   44,   34,   95,   98,  108,  115,   65,   90,   97,  122,   34,   95,
	   65,   90,   97,  122,   58,   34,  123,   34,   34,   44,  125,  125,
	   34,   95,  118,   65,   90,   97,  122,   34,   95,   65,   90,   97,
	  122,   58,   34,   34,   44,  125,   34,   95,   97,   65,   90,   98,
	  122,   34,   95,  108,   65,   90,   97,  122,   34,   95,  117,   65,
	   90,   97,  122,   34,   95,  101,   65,   90,   97,  122,   34,   95,
	   65,   90,   97,  122,   58,   34,   48,   57,   34,   46,   48,   57,
	   48,   57,   34,   48,   57,   34,   95,  117,   65,   90,   97,  122,
	   34,   95,  121,   65,   90,   97,  122,   34,   95,   65,   90,   97,
	  122,   58,  123,   34,   95,  118,   65,   90,   97,  122,   34,   95,
	   65,   90,   97,  122,   58,   34,   34,   44,  125,   34,   95,   97,
	   65,   90,   98,  122,   34,   95,  108,   65,   90,   97,  122,   34,
	   95,  117,   65,   90,   97,  122,   34,   95,  101,   65,   90,   97,
	  122,   34,   95,   65,   90,   97,  122,   58,   34,   48,   57,   34,
	   46,   48,   57,   48,   57,   34,   48,   57,   34,   95,   97,   65,
	   90,   98,  122,   34,   95,  115,   65,   90,   97,  122,   34,   95,
	  116,   65,   90,   97,  122,   34,   95,   65,   90,   97,  122,   58,
	  123,   34,   95,  118,   65,   90,   97,  122,   34,   95,   65,   90,
	   97,  122,   58,   34,   34,   44,  125,   34,   95,   97,   65,   90,
	   98,  122,   34,   95,  108,   65,   90,   97,  122,   34,   95,  117,
	   65,   90,   97,  122,   34,   95,  101,   65,   90,   97,  122,   34,
	   95,   65,   90,   97,  122,   58,   34,   48,   57,   34,   46,   48,
	   57,   48,   57,   34,   48,   57,   34,   95,  101,   65,   90,   97,
	  122,   34,   95,  108,   65,   90,   97,  122,   34,   95,  108,   65,
	   90,   97,  122,   34,   95,   65,   90,   97,  122,   58,  123,   34,
	   95,  118,   65,   90,   97,  122,   34,   95,   65,   90,   97,  122,
	   58,   34,   34,   44,  125,   34,   95,   97,   65,   90,   98,  122,
	   34,   95,  108,   65,   90,   97,  122,   34,   95,  117,   65,   90,
	   97,  122,   34,   95,  101,   65,   90,   97,  122,   34,   95,   65,
	   90,   97,  122,   58,   34,   48,   57,   34,   46,   48,   57,   48,
	   57,   34,   48,   57,   34,   95,  118,   65,   90,   97,  122,   34,
	   95,   65,   90,   97,  122,   58,   34,   34,   44,  125,   34,   95,
	   97,   65,   90,   98,  122,   34,   95,  108,   65,   90,   97,  122,
	   34,   95,  117,   65,   90,   97,  122,   34,   95,  101,   65,   90,
	   97,  122,   34,   95,   65,   90,   97,  122,   58,   34,   48,   57,
	   34,   46,   48,   57,   48,   57,   34,   48,   57,   34,   95,  117,
	   65,   90,   97,  122,   34,   95,  121,   65,   90,   97,  122,   34,
	   95,   65,   90,   97,  122,   58,  123,   34,   95,  118,   65,   90,
	   97,  122,   34,   95,   65,   90,   97,  122,   58,   34,   34,   44,
	  125,   34,   95,   97,   65,   90,   98,  122,   34,   95,  108,   65,
	   90,   97,  122,   34,   95,  117,   65,   90,   97,  122,   34,   95,
	  101,   65,   90,   97,  122,   34,   95,   65,   90,   97,  122,   58,
	   34,   48,   57,   34,   46,   48,   57,   48,   57,   34,   48,   57,
	   34,   95,   97,   65,   90,   98,  122,   34,   95,  115,   65,   90,
	   97,  122,   34,   95,  116,   65,   90,   97,  122,   34,   95,   65,
	   90,   97,  122,   58,  123,   34,   95,  118,   65,   90,   97,  122,
	   34,   95,   65,   90,   97,  122,   58,   34,   34,   44,  125,   34,
	   95,   97,   65,   90,   98,  122,   34,   95,  108,   65,   90,   97,
	  122,   34,   95,  117,   65,   90,   97,  122,   34,   95,  101,   65,
	   90,   97,  122,   34,   95,   65,   90,   97,  122,   58,   34,   48,
	   57,   34,   46,   48,   57,   48,   57,   34,   48,   57,   34,   95,
	  101,   65,   90,   97,  122,   34,   95,  108,   65,   90,   97,  122,
	   34,   95,  108,   65,   90,   97,  122,   34,   95,   65,   90,   97,
	  122,   58,  123,   34,   95,  118,   65,   90,   97,  122,   34,   95,
	   65,   90,   97,  122,   58,   34,   34,   44,  125,   34,   95,   97,
	   65,   90,   98,  122,   34,   95,  108,   65,   90,   97,  122,   34,
	   95,  117,   65,   90,   97,  122,   34,   95,  101,   65,   90,   97,
	  122,   34,   95,   65,   90,   97,  122,   58,   34,   48,   57,   34,
	   46,   48,   57,   48,   57,   34,   48,   57,    0
	};
}

private static final char _ticker_trans_keys[] = init__ticker_trans_keys_0();


private static byte[] init__ticker_single_lengths_0()
{
	return new byte [] {
	    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    4,    2,    1,    2,    1,    1,
	    1,    1,    4,    2,    1,    2,    1,    1,    2,    1,    1,    2,
	    2,    1,    1,    1,    2,    3,    3,    3,    3,    2,    1,    1,
	    0,    2,    0,    1,    3,    3,    2,    1,    1,    1,    2,    2,
	    1,    1,    1,    2,    3,    3,    3,    3,    2,    1,    1,    0,
	    2,    0,    1,    3,    3,    3,    2,    1,    1,    1,    2,    2,
	    1,    1,    1,    2,    3,    3,    3,    3,    2,    1,    1,    0,
	    2,    0,    1,    3,    3,    3,    2,    1,    1,    1,    2,    2,
	    1,    1,    1,    2,    3,    3,    3,    3,    2,    1,    1,    0,
	    2,    0,    1,    1,    2,    2,    1,    1,    1,    2,    3,    3,
	    3,    3,    2,    1,    1,    0,    2,    0,    1,    3,    3,    2,
	    1,    1,    1,    2,    2,    1,    1,    1,    2,    3,    3,    3,
	    3,    2,    1,    1,    0,    2,    0,    1,    3,    3,    3,    2,
	    1,    1,    1,    2,    2,    1,    1,    1,    2,    3,    3,    3,
	    3,    2,    1,    1,    0,    2,    0,    1,    3,    3,    3,    2,
	    1,    1,    1,    2,    2,    1,    1,    1,    2,    3,    3,    3,
	    3,    2,    1,    1,    0,    2,    0,    1,    0
	};
}

private static final byte _ticker_single_lengths[] = init__ticker_single_lengths_0();


private static byte[] init__ticker_range_lengths_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    2,    2,    0,    0,    0,    0,
	    0,    0,    2,    2,    0,    0,    0,    0,    0,    0,    0,    2,
	    2,    0,    0,    0,    0,    2,    2,    2,    2,    2,    0,    0,
	    1,    1,    1,    1,    2,    2,    2,    0,    0,    0,    2,    2,
	    0,    0,    0,    0,    2,    2,    2,    2,    2,    0,    0,    1,
	    1,    1,    1,    2,    2,    2,    2,    0,    0,    0,    2,    2,
	    0,    0,    0,    0,    2,    2,    2,    2,    2,    0,    0,    1,
	    1,    1,    1,    2,    2,    2,    2,    0,    0,    0,    2,    2,
	    0,    0,    0,    0,    2,    2,    2,    2,    2,    0,    0,    1,
	    1,    1,    1,    0,    2,    2,    0,    0,    0,    0,    2,    2,
	    2,    2,    2,    0,    0,    1,    1,    1,    1,    2,    2,    2,
	    0,    0,    0,    2,    2,    0,    0,    0,    0,    2,    2,    2,
	    2,    2,    0,    0,    1,    1,    1,    1,    2,    2,    2,    2,
	    0,    0,    0,    2,    2,    0,    0,    0,    0,    2,    2,    2,
	    2,    2,    0,    0,    1,    1,    1,    1,    2,    2,    2,    2,
	    0,    0,    0,    2,    2,    0,    0,    0,    0,    2,    2,    2,
	    2,    2,    0,    0,    1,    1,    1,    1,    0
	};
}

private static final byte _ticker_range_lengths[] = init__ticker_range_lengths_0();


private static short[] init__ticker_index_offsets_0()
{
	return new short [] {
	    0,    0,    2,    4,    6,    8,   10,   12,   14,   16,   18,   20,
	   22,   24,   26,   28,   30,   32,   34,   36,   38,   40,   42,   44,
	   46,   48,   50,   52,   54,   56,   58,   65,   70,   72,   75,   77,
	   79,   81,   83,   90,   95,   97,  100,  102,  104,  107,  109,  111,
	  116,  121,  123,  125,  127,  130,  136,  142,  148,  154,  159,  161,
	  163,  165,  169,  171,  174,  180,  186,  191,  193,  195,  197,  202,
	  207,  209,  211,  213,  216,  222,  228,  234,  240,  245,  247,  249,
	  251,  255,  257,  260,  266,  272,  278,  283,  285,  287,  289,  294,
	  299,  301,  303,  305,  308,  314,  320,  326,  332,  337,  339,  341,
	  343,  347,  349,  352,  358,  364,  370,  375,  377,  379,  381,  386,
	  391,  393,  395,  397,  400,  406,  412,  418,  424,  429,  431,  433,
	  435,  439,  441,  444,  446,  451,  456,  458,  460,  462,  465,  471,
	  477,  483,  489,  494,  496,  498,  500,  504,  506,  509,  515,  521,
	  526,  528,  530,  532,  537,  542,  544,  546,  548,  551,  557,  563,
	  569,  575,  580,  582,  584,  586,  590,  592,  595,  601,  607,  613,
	  618,  620,  622,  624,  629,  634,  636,  638,  640,  643,  649,  655,
	  661,  667,  672,  674,  676,  678,  682,  684,  687,  693,  699,  705,
	  710,  712,  714,  716,  721,  726,  728,  730,  732,  735,  741,  747,
	  753,  759,  764,  766,  768,  770,  774,  776,  779
	};
}

private static final short _ticker_index_offsets[] = init__ticker_index_offsets_0();


private static short[] init__ticker_indicies_0()
{
	return new short [] {
	    0,    1,    2,    1,    3,    1,    4,    1,    5,    1,    6,    1,
	    7,    1,    8,    1,    9,    1,   10,    1,   11,    1,   12,    1,
	   13,    1,   14,    1,   15,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    1,   24,    1,
	   25,    1,   26,    1,   27,    1,   28,    1,   29,    1,   30,   31,
	   32,   33,   30,   30,    1,   34,   30,   30,   30,    1,   35,    1,
	   36,   37,    1,    1,   38,   39,   38,   40,    1,   41,    1,   42,
	   43,   44,   45,   42,   42,    1,   46,   42,   42,   42,    1,   47,
	    1,   48,   49,    1,    1,   50,   51,   50,   40,   52,    1,   53,
	    1,   54,    1,   55,   56,   55,   55,    1,   57,   55,   55,   55,
	    1,   58,    1,   59,    1,   60,   59,   49,   51,    1,   57,   55,
	   61,   55,   55,    1,   57,   55,   62,   55,   55,    1,   57,   55,
	   63,   55,   55,    1,   57,   55,   64,   55,   55,    1,   65,   55,
	   55,   55,    1,   66,    1,   67,    1,   68,    1,   60,   69,   70,
	    1,   71,    1,   60,   71,    1,   46,   42,   72,   42,   42,    1,
	   46,   42,   73,   42,   42,    1,   74,   42,   42,   42,    1,   75,
	    1,   76,    1,   77,    1,   78,   79,   78,   78,    1,   80,   78,
	   78,   78,    1,   81,    1,   82,    1,   83,   82,   76,   84,    1,
	   80,   78,   85,   78,   78,    1,   80,   78,   86,   78,   78,    1,
	   80,   78,   87,   78,   78,    1,   80,   78,   88,   78,   78,    1,
	   89,   78,   78,   78,    1,   90,    1,   91,    1,   92,    1,   83,
	   93,   94,    1,   95,    1,   83,   95,    1,   46,   42,   96,   42,
	   42,    1,   46,   42,   97,   42,   42,    1,   46,   42,   98,   42,
	   42,    1,   99,   42,   42,   42,    1,  100,    1,  101,    1,  102,
	    1,  103,  104,  103,  103,    1,  105,  103,  103,  103,    1,  106,
	    1,  107,    1,  108,  107,  101,  109,    1,  105,  103,  110,  103,
	  103,    1,  105,  103,  111,  103,  103,    1,  105,  103,  112,  103,
	  103,    1,  105,  103,  113,  103,  103,    1,  114,  103,  103,  103,
	    1,  115,    1,  116,    1,  117,    1,  108,  118,  119,    1,  120,
	    1,  108,  120,    1,   46,   42,  121,   42,   42,    1,   46,   42,
	  122,   42,   42,    1,   46,   42,  123,   42,   42,    1,  124,   42,
	   42,   42,    1,  125,    1,  126,    1,  127,    1,  128,  129,  128,
	  128,    1,  130,  128,  128,  128,    1,  131,    1,  132,    1,  133,
	  132,  126,  134,    1,  130,  128,  135,  128,  128,    1,  130,  128,
	  136,  128,  128,    1,  130,  128,  137,  128,  128,    1,  130,  128,
	  138,  128,  128,    1,  139,  128,  128,  128,    1,  140,    1,  141,
	    1,  142,    1,  133,  143,  144,    1,  145,    1,  133,  145,    1,
	  146,    1,  147,  148,  147,  147,    1,  149,  147,  147,  147,    1,
	  150,    1,  151,    1,  152,  151,   37,   39,    1,  149,  147,  153,
	  147,  147,    1,  149,  147,  154,  147,  147,    1,  149,  147,  155,
	  147,  147,    1,  149,  147,  156,  147,  147,    1,  157,  147,  147,
	  147,    1,  158,    1,  159,    1,  160,    1,  152,  161,  162,    1,
	  163,    1,  152,  163,    1,   34,   30,  164,   30,   30,    1,   34,
	   30,  165,   30,   30,    1,  166,   30,   30,   30,    1,  167,    1,
	  168,    1,  169,    1,  170,  171,  170,  170,    1,  172,  170,  170,
	  170,    1,  173,    1,  174,    1,  175,  174,  168,  176,    1,  172,
	  170,  177,  170,  170,    1,  172,  170,  178,  170,  170,    1,  172,
	  170,  179,  170,  170,    1,  172,  170,  180,  170,  170,    1,  181,
	  170,  170,  170,    1,  182,    1,  183,    1,  184,    1,  175,  185,
	  186,    1,  187,    1,  175,  187,    1,   34,   30,  188,   30,   30,
	    1,   34,   30,  189,   30,   30,    1,   34,   30,  190,   30,   30,
	    1,  191,   30,   30,   30,    1,  192,    1,  193,    1,  194,    1,
	  195,  196,  195,  195,    1,  197,  195,  195,  195,    1,  198,    1,
	  199,    1,  200,  199,  193,  201,    1,  197,  195,  202,  195,  195,
	    1,  197,  195,  203,  195,  195,    1,  197,  195,  204,  195,  195,
	    1,  197,  195,  205,  195,  195,    1,  206,  195,  195,  195,    1,
	  207,    1,  208,    1,  209,    1,  200,  210,  211,    1,  212,    1,
	  200,  212,    1,   34,   30,  213,   30,   30,    1,   34,   30,  214,
	   30,   30,    1,   34,   30,  215,   30,   30,    1,  216,   30,   30,
	   30,    1,  217,    1,  218,    1,  219,    1,  220,  221,  220,  220,
	    1,  222,  220,  220,  220,    1,  223,    1,  224,    1,  225,  224,
	  218,  226,    1,  222,  220,  227,  220,  220,    1,  222,  220,  228,
	  220,  220,    1,  222,  220,  229,  220,  220,    1,  222,  220,  230,
	  220,  220,    1,  231,  220,  220,  220,    1,  232,    1,  233,    1,
	  234,    1,  225,  235,  236,    1,  237,    1,  225,  237,    1,    1,
	    0
	};
}

private static final short _ticker_indicies[] = init__ticker_indicies_0();


private static short[] init__ticker_trans_targs_0()
{
	return new short [] {
	    2,    0,    3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
	   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
	   25,   26,   27,   28,   29,   30,   31,  153,  176,  200,   32,   33,
	   34,  135,   35,   36,   37,   38,   39,   64,   87,  111,   40,   41,
	   42,   46,   43,   44,   45,  224,   47,   48,   53,   49,   50,   51,
	   52,   54,   55,   56,   57,   58,   59,   60,   61,   62,   61,   63,
	   65,   66,   67,   68,   69,   70,   71,   76,   72,   73,   74,   75,
	   44,   77,   78,   79,   80,   81,   82,   83,   84,   85,   84,   86,
	   88,   89,   90,   91,   92,   93,   94,   95,  100,   96,   97,   98,
	   99,   44,  101,  102,  103,  104,  105,  106,  107,  108,  109,  108,
	  110,  112,  113,  114,  115,  116,  117,  118,  119,  124,  120,  121,
	  122,  123,   44,  125,  126,  127,  128,  129,  130,  131,  132,  133,
	  132,  134,  136,  137,  142,  138,  139,  140,  141,  143,  144,  145,
	  146,  147,  148,  149,  150,  151,  150,  152,  154,  155,  156,  157,
	  158,  159,  160,  165,  161,  162,  163,  164,   36,  166,  167,  168,
	  169,  170,  171,  172,  173,  174,  173,  175,  177,  178,  179,  180,
	  181,  182,  183,  184,  189,  185,  186,  187,  188,   36,  190,  191,
	  192,  193,  194,  195,  196,  197,  198,  197,  199,  201,  202,  203,
	  204,  205,  206,  207,  208,  213,  209,  210,  211,  212,   36,  214,
	  215,  216,  217,  218,  219,  220,  221,  222,  221,  223
	};
}

private static final short _ticker_trans_targs[] = init__ticker_trans_targs_0();


private static byte[] init__ticker_trans_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   11,    0,    1,    3,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    7,    0,    0,    0,    0,    0,    0,    0,   11,    0,    1,    3,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    5,    0,    0,    0,    0,    0,    0,    0,   11,    0,    1,
	    3,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    9,    0,    0,    0,    0,    0,    0,    0,   11,    0,
	    1,    3,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   11,    0,    1,    3,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    7,    0,    0,    0,
	    0,    0,    0,    0,   11,    0,    1,    3,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    5,    0,    0,
	    0,    0,    0,    0,    0,   11,    0,    1,    3,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    9,    0,
	    0,    0,    0,    0,    0,    0,   11,    0,    1,    3
	};
}

private static final byte _ticker_trans_actions[] = init__ticker_trans_actions_0();


static final int ticker_start = 1;
static final int ticker_first_final = 224;
static final int ticker_error = 0;

static final int ticker_en_main = 1;


// line 68 "MtgoxTickerV2.ragel"
	

	public static Valuation parse (String json) 
	{
		char[] data = json.toCharArray();
		
		int cs = 0;
		int p = 0;
		int pe = data.length;
		
		int zero = (int) '0';
		long i = 0;
		double f = 0.0;
		double scale = 1.0;
        
        double last = 0;
        double buy = 0;
        double sell = 0;
		
		
// line 374 "src/com/appspot/btcticker/fsm/MtgoxTickerV2.java"
	{
	cs = ticker_start;
	}

// line 88 "MtgoxTickerV2.ragel"
		
// line 381 "src/com/appspot/btcticker/fsm/MtgoxTickerV2.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _ticker_key_offsets[cs];
	_trans = _ticker_index_offsets[cs];
	_klen = _ticker_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _ticker_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _ticker_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _ticker_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _ticker_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _ticker_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _ticker_indicies[_trans];
	cs = _ticker_trans_targs[_trans];

	if ( _ticker_trans_actions[_trans] != 0 ) {
		_acts = _ticker_trans_actions[_trans];
		_nacts = (int) _ticker_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _ticker_actions[_acts++] )
			{
	case 0:
// line 25 "MtgoxTickerV2.ragel"
	{ i = 0; f = 0.0; scale = 1.0; }
	break;
	case 1:
// line 26 "MtgoxTickerV2.ragel"
	{ i = i * 10 + (int)data[p] - zero; }
	break;
	case 2:
// line 27 "MtgoxTickerV2.ragel"
	{ scale = scale * 0.1; f = f + scale * ((int)data[p] - zero); }
	break;
	case 3:
// line 48 "MtgoxTickerV2.ragel"
	{ last = i + f; }
	break;
	case 4:
// line 49 "MtgoxTickerV2.ragel"
	{ buy  = i + f; }
	break;
	case 5:
// line 50 "MtgoxTickerV2.ragel"
	{ sell = i + f; }
	break;
// line 485 "src/com/appspot/btcticker/fsm/MtgoxTickerV2.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
case 5:
	}
	break; }
	}

// line 89 "MtgoxTickerV2.ragel"
		
		if (cs < ticker_first_final) {
            return null;
        }
        else {
        	Valuation v = new Valuation(buy, sell, last);
        	
        	return v;
        }
	}
}